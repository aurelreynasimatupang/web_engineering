openapi: "3.0.2"
info:
  title: Web Engineering Properties Rental API
  version: "1.0"
  description: |
    Properties Rental API designed by group 17 of the 2021 Web Engineering course. Members include Abel, Lazos, Aurel and Ravi.

servers:
  - url: https://api.server.test/v1

#Paths

paths:
  #Specify Url
  /:
    #Get Path
    get:
      tags:
        - Properties
      summary: Retrieves properties
      description: Retrieves all properties with some parameters
      parameters:
        - name: latitude
          in: query
          required: false
          description: Latitude of the property
          schema:
            type: integer
        - name: longitude
          in: query
          required: false
          description: Longitude of the property
          schema:
            type: integer
        - name: city
          in: query
          required: false
          description: City location of property
          schema:
            type: string
        - name: is-available
          in: query
          required: false
          description: Boolean of availability
          schema:
            type: string
            enum:
              - true
              - false
        - name: min
          in: query
          required: false
          description: Minimum rent cost
          schema:
            type: integer
        - name: max
          in: query
          required: false
          description: Maximum rent cost
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          description: Number of properties returned
          schema:
            type: integer
            default: 10

        - name: order-by
          in: query
          description: order by rental cost or by cost per sqm
          schema:
            type: string
            enum:
              - rent
              - costsqm
        - name: order-dir
          in: query
          required: false
          description: The directorion to order the indicated column
          schema:
            type: string
            enum:
              - desc
              - asc
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Property"
            text/csv:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Property"
        "204":
          $ref: "#/components/responses/NoResults"

        "400":
          $ref: "#/components/responses/BadRequest"

        "5XX":
          $ref: "#/components/responses/ServerError"

    #Put Path
    put:
      tags:
        - Properties
      summary: Updates properties
      description: Update all properties with some parameters
      parameters:
        - name: latitude
          in: query
          required: false
          description: Latitude of the property
          schema:
            type: integer
        - name: longitude
          in: query
          required: false
          description: Longitude of the property
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Property"
          text/csv:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Property"
      responses:
        "200":
          description: "Properties updated, returns the new state"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Property"
            text/csv:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Property"
        "400":
          $ref: "#/components/responses/BadRequest"

        "404":
          $ref: "#/components/responses/NotFound"

        "5XX":
          $ref: "#/components/responses/ServerError"

    #Delete Path
    delete:
      tags:
        - Properties
      summary: Deletes multiple properties
      description: Delete all properties with some parameters
      parameters:
        - name: latitude
          in: query
          required: false
          description: Latitude of the property
          schema:
            type: integer
        - name: longitude
          in: query
          required: false
          description: Longitude of the property
          schema:
            type: integer
      responses:
        "204":
          description: Properties deleted successfully
        "400":
          $ref: "#/components/responses/BadRequest"

        "404":
          $ref: "#/components/responses/NotFound"

        "5XX":
          $ref: "#/components/responses/ServerError"

  #Specify Url
  /users:
    parameters:
      - name: city
        in: query
        required: false
        description: The city which the user resides in
        schema:
          type: string
    #Get Path
    get:
      tags:
        - Users
      summary: Returns multiple users
      description: Retrieve a property with some parameters
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
            text/csv:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "204":
          $ref: "#/components/responses/NoResults"

        "400":
          $ref: "#/components/responses/BadRequest"

        "5XX":
          $ref: "#/components/responses/ServerError"
  #Specify Url
  /{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: The external ID for the property
        schema:
          type: integer

    #Get Path
    get:
      tags:
        - Properties
      summary: Returns a selected property by ID
      description: Retrieve a property with a unique ID

      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Property"
            text/csv:
              schema:
                $ref: "#/components/schemas/Property"
        "400":
          $ref: "#/components/responses/BadRequest"

        "404":
          $ref: "#/components/responses/NotFound"

        "5XX":
          $ref: "#/components/responses/ServerError"

    #Put Path
    put:
      tags:
        - Properties
      summary: Update a selected property by ID
      description: Updates the property with the given id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Property"
          text/csv:
            schema:
              $ref: "#/components/schemas/Property"
      responses:
        "200":
          description: "Property updated, returns the new state"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Property"
            text/csv:
              schema:
                $ref: "#/components/schemas/Property"
        "400":
          $ref: "#/components/responses/BadRequest"

        "404":
          $ref: "#/components/responses/NotFound"

        "5XX":
          $ref: "#/components/responses/ServerError"

    #Delete Path
    delete:
      tags:
        - Properties
      summary: Delete a selected property by ID
      description: Deletes the property with the given id
      responses:
        "204":
          description: Property deleted successfully

        "400":
          $ref: "#/components/responses/BadRequest"

        "404":
          $ref: "#/components/responses/NotFound"

        "5XX":
          $ref: "#/components/responses/ServerError"

  #Specify Url
  /statistics:
    #Get Path
    get:
      tags:
        - Statistics
      summary: Retrieves properties statistics
      description: Retrieves statistics (mean, median, & standard deviation) of every city
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Statistics"
            text/csv:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Statistics"
        "204":
          $ref: "#/components/responses/NoResults"

        "400":
          $ref: "#/components/responses/BadRequest"

        "5XX":
          $ref: "#/components/responses/ServerError"

  /statistics/{city}:
    parameters:
      - name: city
        in: query
        required: true
        description: Name of the city
        schema:
          type: string

    #Get Path
    get:
      tags:
        - Statistics
      summary: Retrieves statistic of a city
      description: Retrieves statistics (mean, median, & standard deviation) from a given city
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Statistics"
            text/csv:
              schema:
                $ref: "#/components/schemas/Statistics"
        "204":
          $ref: "#/components/responses/NoResults"

        "400":
          $ref: "#/components/responses/BadRequest"

        "5XX":
          $ref: "#/components/responses/ServerError"

  #Specify Url
  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: The id of the user
        schema:
          type: integer

    #Get Path
    get:
      tags:
        - Users
      summary: Returns a selected user by ID
      description: Retrieve a user with a unique ID

      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            text/csv:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"

        "404":
          $ref: "#/components/responses/NotFound"

        "5XX":
          $ref: "#/components/responses/ServerError"

#Below are the components

components:
  schemas:
    PropertySummary:
      type: object
      description: Summary of a property
      required:
        - "id"
      properties:
        id:
          type: string
          example: room-1235
        title:
          type: string
          example: West-Varkenoordseweg
        city:
          type: string
          example: Groningen
        rent:
          type: integer
          example: 600
        is_active:
          type: string
          example: true
        deposit:
          type: integer
          example: 700
    Property:
      type: object
      description: Details of a property
      required:
        - "id"
      properties:
        id:
          type: string
          example: room-1235

        property_type:
          type: string
          example: Room/Studio/Appartment

        areasqm:
          type: number
          example: 14

        costsqm:
          type: number
          example: 14

        title:
          type: string
          example: West-Varkenoordseweg

        postal_code:
          type: string
          example: 7424NA

        latitude:
          type: number
          example: 14

        longitude:
          type: number
          example: 25

        city:
          type: string
          example: Groningen

        rent:
          type: integer
          example: 600

        is_active:
          type: string
          example: true

        deposit:
          type: integer
          example: 700

        additional_cost:
          type: integer
          example: 120

        Place Info:
          type: object
          description: Property description
          properties:
            rent_details:
              type: string
              example: Utilities included
            smoking:
              type: string
              example: No

            pets:
              type: string
              example: Yes

            roommates:
              type: integer
              example: 4

            toilet:
              type: string
              example: Shared/Own

            gender:
              type: string
              example: Male/Female
        User:
          type:
          $ref: "#/components/schemas/UserSummary"

        Match Tenant:
          type: object
          description: Desires tenant of the property according to the user that posted the property
          properties:
            match_age:
              type: string
              example: 25 years - 60 years

            match_capacity:
              type: string
              example: 1 person

            match_gender:
              type: string
              example: Female

            match_languages:
              type: array
              items:
                type: string
                example: Dutch

            match_status:
              type: array
              items:
                type: string
                example: Student
    User:
      type: object
      description: Description of the user who submitted the ad
      required:
        - "id"
      properties:
        id:
          type: integer
          example: 4680711
        displayname:
          type: string
          example: Huize west

        last_logged_on:
          type: string
          example: 21-07-2019

        member_since:
          type: string
          example: 26-06-2019

        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertySummary"
    UserSummary:
      type: object
      description: Description of the user who submitted the ad
      required:
        - "id"
      properties:
        id:
          type: integer
          example: 4680711
        display_name:
          type: string
          example: Huize west
    Statistics:
      type: object
      description: Statistics of properties in a specific city
      required:
        - city
      properties:
        city:
          type: string
          example: Groningen
        numRent:
          type: number
          example: 4
        sumRent:
          type: number
          example: 1400
        meanRent:
          type: number
          example: 500
        medianRent:
          type: number
          example: 560
        sdRent:
          type: number
          example: 69
        numDeposit:
          type: number
          example: 4
        sumDeposit:
          type: number
          example: 1400
        meanDeposit:
          type: number
          example: 420
        medianDeposit:
          type: number
          example: 480
        sdDeposit:
          type: number
          example: 56
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertySummary"

  responses:
    BadRequest:
      description: Request was not well-formed, see error details
      content:
        application/json:
          schema:
            type: object
            properties:
              error-message:
                type: string
                description: Error message detailing the problem with the request
                example: Request was not well-formed, try again.
        text/csv:
          schema:
            type: object
            properties:
              error-message:
                type: string
                description: Error message detailing the problem with the request
                example: Request was not well-formed, try again.

    NotFound:
      description: Resource not found

    NoResults:
      description: List empty; no results

    ServerError:
      description: Server error; no results, try again later
